apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'shipbooksdk'
    bintrayName = 'android'
    bintrayOrg = 'shipbook'
    publishedGroupId = 'io.shipbook.shipbooksdk'
    libraryName = 'shipbooksdk'
    artifact = 'shipbooksdk'

    libraryDescription = 'ShipBook is the premier logging platform for mobile developers.'

    siteUrl = 'https://shipbook.io'
    githubRepository = 'https://github.com/ShipBook/ShipBookSDK-Android'
    gitUrl = 'git@bitbucket.org:shipbook/android.git'

    libraryVersion = '1.0.0'

    developerId = 'elisha'
    developerName = 'Elisha Sterngold'
    developerEmail = 'info@shipbook.io'

    organization = "shipbook"

    licenseName = 'MIT'
    licenseUrl = 'https://github.com/ShipBook/ShipBookSDK-Android/blob/master/LICENSE'
    allLicenses = ["MIT"]
}

apply plugin: 'kotlin-android'

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 7
        versionName "1.0.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets { main { res.srcDirs = ['src/main/res', 'src/main/res/raw'] } }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
}

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

kotlin {
//    experimental {
//        coroutines "enable"
//    }
}

tasks.withType(Javadoc).all {
    enabled = false
}

// Place it at the end of the file
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
// apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle' // there is missing userOrg therefor can't be used therefore I added manually
apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayOrg
        desc = libraryDescription
        websiteUrl = siteUrl
        issueTrackerUrl = siteUrl+'/issues'
        vcsUrl = gitUrl
        licenses = allLicenses
        githubRepo = githubRepository //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
